
함수와 메소드
	클래스 밖에 선언되어 있다면 함수라고 부르지만 클래스 내부에 선언되어 있는 함수는 메소드라고 부른다.
	자방서는 모든 함수가 클래스 내부에서 선언되기 때문에 메소드만 존재한다.
	개념상 함수가 메소드보다 더 큰 범주이므로 메소드를 함수라고 불러도 되지만, 자바는 메소드만 존재하므로 메소드라고 부르는게 좋다.







메소드
	기능
	이름 뒤에 소괄호.
	단, 키워드 뒤에 소괄호는 메소드가 아니다.

메소드 선언과 구현(정의)
	리턴타입 메소드명(자료형 매개변수명, ......) <-선언부
	{						<-구현부	
		실행할 문장;
		return 리턴값;
	}
	
1.리턴타입 : 반환할 값이 있다면 반환 값의 자료형을 작성한다.
		없다면 void를 작성한다.

2.메소드명 : 동사로 작성한다.

3.매개변수 : 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언해준다.(자료형이 반드시 필요하다)
		생략이 가능하다. (단, 생략하면 외부에서 값을 받을 수 없다.)
4.실행할 문장 : 생략이 가능하다. 메소드의 기능을 구현하는 코드를 작성한다.
5.return : 생략이 가능하며 return이 실행되면 메소드가 종료된다. 
		return 값이 있다면 메소드를 사용한 부분을 통채로 리턴값으로 본다.
		return 값이 없다면 값이 아니다.

메소드의 정의와 사용
	1.메소드를 정의할 때에는 {}중괄호가 있고, 반드시 메소드 밖에서 정의한다.
	2.메소드를 사용할 때에는 {}중괄호가 없고, 반드시 메소드 안에서 사용한다.

메소드의 정의 순서
1. 기능을 생각한다.(숫자를 더해주는 기능)
2.반환타입이 생각나지 않으면 우선 void로 작성
3.기능에 알맞은 메소드 명을 작성한다.(가능하면 동사로 add, sum)
	void add(){
	}
4.매개변수를 생각한다.
	void add (int left, int right){
	}
5.실행할 문장을 작성한다.
	void add (int left, int right){
		int result = left + right;
	}
6.리턴 값을 생각한다.
	int add (int left, int right){
	int result = left + right;
	return result;
	}

메소드 추가 설명
	1.return타입이 있는 경우 하나의 값으로 볼 수 있다.
	2.메소드는 기능을 저장하는 것이라고 볼 수 있다.
	(대충 이해하기 위해서)


메소드를 사용하는 이유
	1.중복된 코드의 제거
	2.높은 재사용성
	3.유지보수에 유리함