사용자 정의 예외 클래스
	public class 예외명 extends Exception{
		생성자(){
				super("사용자 정의 예외 메세지");
			}
		}


예외 클래스에서 제공하는 메소드
1. gentMessage()	: 예외 메세지를 문자열로 반환함
2.printStackTrace() : 예외 발생 지점을 추적하여 단계별로 전부 출력함
3.toString() : 발생한 예외 객체를 문자열로 반환함
	**toString()은 생략이 가능하다.

라이브러리
	다른 개발자가 미리 만들어 놓은 소스코드 덩어리

API(Application Programming Interface)
	어플리케이션 개발에 필요한 것들을 가져다 쓸 수 있게 해주는 중간다리(매개체)
	개발에 필요한 라이브러리들의 집합

JAVA API
	-내부 API
	JDK 설치시 제공해주는 기본 API
	자바로 어플리케이션을 쉽게 구현할 수 있도록 한 라이브러리 집합
	docs.oracle.com/javase
	-외부 API
	선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
	보통 JAR파일로 배포하며 자바 프로젝트에 build path로 추가하여 사용할 수 있다.

-외부 API Build Path에 추가하기
배포된 JAR파일 다운 받기> 프로젝트 우클릭 > Build Path	> Configure Build path > Libraries 탭 클릭 > Add External JARs 클릭
						      >저장된 경로의 .jar 파일 더블 클릭으로 추가 > Aplly클릭 > Oreders and Exports 탭 클릭 > 
							Select All 클릭 > Apply and Close

Object 클래스
	모든 클래스의 최상위 조상 클래스

	1.toString()
	Object의 toString() 은 참조값을 문자열 형태로 출력한다.
	(클래스경로와 이름@16진수로 변환된(해쉬코드))
	참조 변수를 print()등의 출력메소드로 출력하면 항상 toString()이 사용된다.  -> 참조값이 나오는 이유
	toString()을 통해 출력되는 문자열을 바꾸고 싶으면 재정의해서 사용하면된다.
	
	2.equals()
	object의 equals()는 사실 ==과 같다.
	String의 equals()는 재정의 되어 값을 비교한다.
	-> 문자열의 비교는 equals()를 사용해야만 한다.
	우리가 만든 클래스 객체를 비교하고 싶다면, 비교 기준을 재정의하여 사용할 수 있다.
	
	3.hashCode()
	object의 hashCode()는 객체의 주소값을 특정 알고리즘을 거쳐서 정수값으로 반환한다.
	자바에서는 equals()를 재정의하면 hashCode()도 재정의하도록 권장한다.
	(두 객체의 equals()가 true라면 hashCode()도 동일하게 나오도록 재정의하는 것을 권장함)

Wrapper Class
	기본 자료형들의 클래스 타입

Wrapper Class를 사용하는 이유
	-클래스타입은 다양한 메소드를 제공 받을 수 있다.
	-자바에서는 클래스타입이 갖는 이점이 많다.
	-예를들어 api에서 제공하는 여러 메소드는 매개변수로 클래스타입을 받는 경우 기본 자료형을 넘겨줄 수 없으므로 박싱을 해줘야한다.
	
	object는 모든 클래스의 조상이므로 object배열을 만들면 모든 자료형을 담을 수 있다.
	

