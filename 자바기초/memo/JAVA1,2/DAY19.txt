동기화(Synchronization)
	A쓰레드와 B쓰레드가 작업을 진행할 때 A가 사용중인 자원을 B가 사용하여 변경한다면 A의 작업 의도와 다르게 결과가 나타날 수 있다.
	이러한 것을 방지하기 위해 하나의 자원을 여러 쓰레드가 동시에 접근하지 못하게 막는 것을 '동기화' 라고한다.

동기화 영역 만들기
	-synchronized(객체명){....} : 동기화 블럭
	일부 소스코드만 동기화를 걸어준다.
	쓰레드는 지정된 객체의 lock을 얻어내며 해당 객체의 lock을 가진 쓰레드만 동기화 블럭에 접근이 가능하다.
	
	-synchronized 메소드명()	{...} : 동기화 메소드
	해당 메소드 전체에 동기화를 걸어준다.

lock
	쓰레드가 공유되는 자원을 사용할 때 생기는 문제를 동기화로 해결한다.
	이때 하나의 자원에 하나의 쓰레드만 접근하기 위해 사용하는 개념이 lock이다.
	자바의 모든 객체는 하나의 lock을 가지고 있다.
	동기화된 영역을 쓰레드가 사용하기 위해서는 lock을 획득해야하며, 동기화 영역을 벗어나면 lock을 반납하고 다른 쓰레드가 lock을 가져와 자원을 사용한다.

-wait()
	동기화된 영역에서만 사용 가능
	쓰레드의 lock을 회수하여 다른 쓰레드에게 제어권을 넘겨주고 대기한다.
	(대기중에는 lock을 얻을 수 없다.)

-notify()
	동기화된 영역에서만 사용 가능
	대기중인 쓰레드 중 하나를 깨운다.
	(실행 가능한 상태로 바뀌는 것이지 lock을 바로 넘겨 주는게 아니다.)


Thread 종료 방법
1. 쓰레드 객체의 interrupt()를 사용하여 InterruptedException을 발생시켜 try~catch문으로 이동시킨다.
여기서 InterruptedException은 쓰레드를 대기상태로 만드는 sleep(), wait(), join()등의 메소드를 사용한 곳에서 발생한다.
위의 메소드들에 예외처리를하고 interrupt()를 통해 예외를 발생시키면 쓰레드의 흐름이 해당 메소드의 catch문으로 이동된다.

예외처리를 했다고 강제종료가 되는 것이 아니므로 catch문에서 쓰레드가 종료될 수 있는 코드를 작성하여 처리해줘야 한다.

2.System.exit(0)를 사용하면 전체 쓰레드가 종료된다.
(가급적 사용하지 말자)



스트림(stream)
	데이터를 주고받는 통로
	데이터는 바이트 형태로 전송된다.

버퍼(buffer)	
	데이터 전송할 때 데이터를 임시로 저장하는 공간(임시 저장공간)

스트림과 버퍼
	데이터를 바이트 단위로 바로 전송하지 않고 버퍼라는 임시저장공간에 저장을 하여 일정 데이터가 쌓였을때 한번에 전송하면 전송 속도가 빠르다

File 클래스
	파일을 자바의 객체로 다룰 수 있게 해주는 클래스
	외부에 파일을 만들거나 외부 파일을 가져올 때 그 파일을 File타입 객체로 만들어서 사용한다.

스트림의 종류
	-기본 스트림 : 실제 데이터를 주고받는 스트림
	-보조(필터) 스트림 :	 기본 스트림을 보조하여 기능을 향상시킨다.

	-기본 스트림
	OutputStream / InputStream
	데이터를 바이트로 전송한다.

	Writer / Reader
	데이터를 2바이트씩 전송한다.	(문자 단위)

	-보조 스트림
	Buffered
	BufferedOutputStream, BufferedWriter 등등
	데이터를 버퍼로 처리한다.

파일 입출력
-Writer(출력)
	BufferedWriter : 버퍼를 사용한 출력 클래스
	FileWriter : 전달한 경로의 파일을 출력하기 위한 목적으로 열어준다. 
		전달한 경로에 파일이 없다면 새롭게 만든 후 열어준다.
	File : 전달한 경로에 있는 파일의 정보를 담는다.
		타일 파일의 유무 검사, 파일 삭제 등
-Reader(입력)
	BufferedReader
	FileReader : 경로에 파일이 없다면 FileNotFoundException예외가 발생한다.
	File
