프로그램(일반적으로 '소프트웨어'라고도 부른다.)
	-특정 작업을 수행하는 명령어들의 모음
	-메모리를 할당 받지 않은 상태 ->꺼져있다.

프로세스
	-실행 중인 프로그램
	-프로세스는 프로그램을 실행시키기 위한 메모리등의 자원과 쓰레드로 구성된다.
	즉, 하나의 프로세스는 하나 이상의 쓰레드를 가지고 있다.

쓰레드
	하나의 프로세스 내에서 작업을 처리하는 흐름의 단위
	작업을 처리하는 것

싱글 쓰레드
	하나의 쓰레드가 작업을 마치면 프로그램이 종료된다.
	쓰레드를 하나만 가지고 있기 때문에 작업을 순차적으로 처리하므로 상대적으로 비효율적이다.
	쓰레드는 자원을 사용하는데 싱글 쓰레드는 혼자서 자원을 사용하므로 동기화를 걱정할 필요가 없다.
	따라서 안정성이 높고 설계가 쉽다.

멀티 쓰레드
	메인쓰레드가 작업을 마치더라도 다른 쓰레드의 작업이 모두 끝나야 프로그램이 종료된다.
	하나의 프로세스에서 여러 작업을 동시에 처리하는 것처럼 느껴지지만 사실은 각각의 쓰레드를 매우 빠른 속도로 번갈아가며 실행시켜서 조금씩 처리한다.
	쓰레드간 공유하는 자원이 있다면 충돌이 생겨 문제가 발생할 수 있으며 이런 문제를 동기화(Synchronized)를 통해 해결한다.
	안정성이 떨어지고 설계가 굉장히 어렵다.

멀티 쓰레드 구현 방법
	1. Thread 클래스 상속
	2. Runnable 인터페이스 구현

	-run()메소드에 쓰레드가 처리할 작업을 재정의한다.
	-start()메소드로 쓰레드를 실행시킨다.

멀티 쓰레드 관련 메소드
1. run() 쓰레드가 호출하는 메소드
2. start() : 쓰레드를 실행시키며, 쓰레드가 run()메소드를 호출한다.
3. sleep(long lillis) : 매개변수로 전달한 시간 동안 쓰레드를 멈춘다.
4. join(), join(long lillis)
	현재 쓰레드의 작업을 멈추고 join을 사용한 쓰레드를 기다린다.
	매개변수에 값을 전달하지 않으면 현재 쓰레드가 join을 사용한 쓰레드의 작업이 끝날 때까지 기다린다.
	매개변수에 값을 전달하면 해당 시간 동안 기다렸다가 현재 쓰레드를 다시 실행한다.
	보통 먼저 실행시킬 쓰레드에 사용한다.
	

