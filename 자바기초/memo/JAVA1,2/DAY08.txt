메소드와 메모리
	메소드는 실행되면 메모리의 Stack영역에 메소드 실행에 필요한 저장공간이 생성된다.
	그 곳에 메소드 내부에서 선언한 변수(지역변수, 매개변수)들의 저장공간이 생성된다.
	메소드의 코드가 모두 실행되어 종료되면 Stack영역에서 해당 메소드의 저장공간이 삭제된다.(메모리 해제)
	그러면 지역변수의 저장공간이 사라지므로 지역변수는 사용이 불가능하다.

객체지향 프로그래밍(Object Oriented Programing)이란?
	추상화된 클래스로 객체를 만들고 객체들간에 관계를 맺어 상호작용하는 프로그래밍 기법
	->객체가 주인공
추상화란? (객체 모델링)
	공통되는 특징을 파악하여 하나의 묶음으로 만들어낸다.

클래스 
		1.사용자 정의 타입이다.(자료형)
		클래스를 사용하면 여러 타입,  여러 값을 저장할 수 있는 저장공간을 만들 수 있다.
		클래스 안에 선언된 변수를 사용하고 싶다면 해당 클래스 타입으로 변수를 선언해야 한다.

		2.연관성 있는 저장공간과 기능 한 곳에 모아 편하게 관리할 수 있는 것 (연관있는 변수와 메소드의 모음)
		저장공간과 기능을 나누어 관리하게되면 코드가 길어졌을 때 사용하기 불편하다.
		이 때 연관되는 저장공간과 기능을 클래스로 묶어서 관리할 수 있다.
		
		3.객체를 생성하기 위한 틀, 설계도
			공통되는 속성(변수)과 행위(메소드)를 한번만 선언해 놓고 가져다 사용만 하도록 설계한다.
			
		4.추상적인 것(클래스)을 구체화 시키면(메모리에 올라간 것) 객체라고 한다.
		
객체(Object)와 인스턴스(instance)
	객체 : 실제 사물 또는 개념
	클래스 : 객체를 컴퓨터에 옮기기 위해 추상화한 것, 실제 존재하는 공간이 아니며 추상적이다.
	인스턴스 : 클래스를 메모리에 할당시킨 것이며 물리적 존재하는 공간 즉 구체화한것

	객체는 인스턴스보다 큰 범주이다. 일반적으로 객체와 인스턴스는 동일하다고 생각하고 사용해도 된다.

인스턴스화(객체화) : instantiation	
		객체를 만드는 작업, 추상적인 개념을 구체화시키는 작업
		클래스명 객체명 = new 클래스명();
		자료형    변수명 = new 생성자();

클래스의 선언
		class 클래스명{	
			변수;			//멤버 변수, 필드, 전역 변수
		
			메소드(){}		//멤버 메소드
						//class를 구성하는 모든 변수, 메소드 등을 합쳐서 멤버라고 부른다.
	}

객체 사용 방법
	변수명.멤버명
	.(마침표) : 하위 연산자, 멤버접근 연산자, 닷 연산자

	MyClass                   refVar             =             new MyClass();
	자료형(클래스)	   참조변수명       대입연산자    new 생성자();
-----------------------------------------------			------------------
		1번					3번			2번

1. refVar라는 참조변수는 지역변수 이므로 stack영역에 생성된다.
데이터 타입(자료형)은 참조하려는 대상과 같은 자료형이여야 하므로 MyClass라고 지정한다.

2.new 연산자가 Heap메모리에 MyClass객체를 생성하고 참조값을 가져온다.

3. 대입연산자를 통해 오른쪽의 참조값을 왼쪽의 참조변수에 저장한다.	

생성자
	클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 비슷하지만 
	메소드라고 부르지 않는다.
	생성자는 리턴이라는게 존재하지 않는다.

기본 생성자
	public 클래스명(){}
	매개변수가 없다.
	클래스 선언 시 자동으로 선언되며, 사용자가 직접 생성자를 선언하게되면 자동으로 만들어주지 않는다.


