Casting
	up casting : 자식 값을 부모 타입으로 형변환
	down casting : 이미 up casting이 된 값을 다시 자식 타입으로 형변환

	*부모값을 자식 타입으로 형변환 시 오류
	*자식 클래스 타입의 객체는 부모 클래스 타입도 동시에 갖는다.

주의사항
	1.up Casting으로 자식 참조값을 저장했다면 자식 클래스에 Override(재정의)한 기능이 실행된다.
	2.Up Casting으로 자식 참조값을 저장했다면 자식 클래스에 새로 구현한 기능들은 사용할 수 없다. 이경우 Dwon Casting을 통해서 복구하고 사용한다.
	
다형성
	하나의 것이 여러 가지 형태를 가질 수 있는 성질
	1.오버로딩
	2.오버라이딩
	3.참조변수의 다형성(매개변수의 다형성)

객체 간 타입 비교
	-instanceof
	a instanceof A : 조건식, 참 또는 거짓이 나오는 식
	a가 A타입이면 true
	a가 A타입이 아니면 false

추상 메소드
		-메소드를 선언만하고 구현을 하지않은 것을 추상 메소드라고 한다.
		(미완성된 메소드) 

		-abstract void 메소드명 (매개변수); (세미콜론 필수)
			1.abstract 키워드를 사용한다.
			2.마지막에 세미콜론을 써야한다.
추상 클래스
		abstract 키워드가 붙은 클래스는 추상 클래스 이며 추상 메소드가 한 개 이상있는 클래스는 반드시 추상 클래스로 선언해야한다.
		(미완성된 클래스)

추상 클래스 선언
		abstract class 클래스명{
			abstract 리턴타입 메소드명(자료형 매개변수,..)
				*일반 메소드도 선언 가능*
		1.객체화 시킬 수 없다

		미완성된 메소드(추상메소드)는 상속받은 자식클래스에서 반드시 재정의하여 구현을 해야만 해당 클래스를 객체화 할 수 있다.
		그러므로 [강제성]을 부여하기 위해서 추상 메소드를 선언한다.

추상 클래스를 사용하는 이유
	공통되는 속성과 행위를 추상화하여 부모클래스를 만드는데 반드시 모든 자식 클래스에서 구현해야하는 메소드가 있다면 추상 메소드로 선언하는게 좋다.
	추상 클래스를 상속받은 자식 클래스는 추상 메소드를 오버라이딩 하지 않으면 오류가 발생하므로 [강제성]이 생기게 된다.
	만약 부모클래스에서 메소드를 구현한다면 강제성이 없으므로 자식클래스를 만드는 개발자가 재정의하지 않고 그냥 넘어갈 수 있다.

인터페이스(interface)
	일종의 추상 클래스이지만 클래스라고 부르지 않으며 추상화의 정도가 높다.
	맴버로는 상수와 추상메소드만 가질 수 있다.
	인터페이스는 객체화 할 수 없다.
	인터페이스는 다른 클래스에서 구현(implements)해서 사용한다. (상속과 비슷)
	구현할 떄에는 implements 키워드를 사용한다.
인터페이스의 선언
	interface 인터페이스명 {
		맴버 선언;
	}

인터페이스의 맴버
	1.모든 변수는 public static final이 붙은 상수이다.(생략해도 자동으로 붙는다.)
	2.모든 메소드는 public abstract 이다. (생략해도 자동으로 붙는다)
	

클래스 상속과 인터페이스 구현
	1.클래스는 단일상속만 가능하며 인터페이스는 다중 구현이 가능하다.
	2.인터페이스는 인터페이스를 상속할 수 있다.
	3.상속과 구현은 별개이다.
	즉 하나의 클래스에 상속과 구현을 동시에 할 수 있다.
