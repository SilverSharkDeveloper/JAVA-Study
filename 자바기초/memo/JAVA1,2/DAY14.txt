함수형 인터페이스(Functional Interface)
	단 하나의 추상 메소드를 가지고 있는 인터페이스
	@FunctionalInterface 라는 어노테이션을 명시해주면 하나의 추상 메소드만 선언할 수 있도록 제한 할 수 있다.

람다식(Lambda Expression) : 익명 메소드
		자바 8버전 부터 사용가능하다.
		메소드를 하나의 식으로 표현한다.
		람다식을 매개변수로 전달 가능하다, 반환도 가능하다.
	
		함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 람다식으로 재정의할 때 메소드 이름이 필요 없다.

람다식 문법
	-매개 변수 -> 바디
	

	<람다식으로 변형>
           int add10(int number) {
		return number + 10	;
	    }

	
	   int add10(int number){return number + 10;}
	 * int (int number)->{return number + 10;} //이름을 없애고 ->를 추가한다
	 * (int number)->{return number + 10;} //반환 타입은 추론이 가능하므로 생략한다.
	 * (number)->{return number + 10;} //매개변수 타입은 추론이 가능하므로 생략한다.
	 * number->{return number + 10;} //매개변수 1개라면 ()를 생략가능 (선택)
	 * number->number + 10 //중괄호와 세미콜론을 생략가능하다.(선택) ->중괄호와 세미콜론을 생략하면 리턴도 생략해야한다.
	 * 															//바디의 결과가 값이라면 자동으로 return된다.
	 * 															//단, 바디에 식 1개만 있어야한다.
	 * 
	 * 
	 * 
	 * 매개변수가 2개 이상일때 () 생략 불가
	 * 명령어가 2개이상일 때 {} ; 생략불가
	 * 반환할 값이 존재한다면 return 사용하기

예외 처리

오류의 종류
	-에러(error) : 개발자가 해결 할 수 없는 문제(코드로 수습 불가능)
	-예외(Exception) : 개발자가 해결 가능한 문제(코드로 수습 가능)

예외의 발생 시점
	-확인된 예외(checked exception)
		컴파일 단계에서 발생하는 예외(이클립스 빨간줄)
	-미확인 예외(unchecked exception)
		프로그램 실행 중(런타임) 발생하는 예외

예외 처리
	예상되는 예외를 적절한 처리를하여 비정상적인 종료를 막는다.

예외 처리 문법
	try{
		실행할 명령문;
		(예외가 예상되는 코드)
	}catch(예외 이름 객체명){
		예외를 처리하는 명령문(예외 발생 시 실행할 코드)
	}catch(){
	
	}.....
	
	}finally{
		오류 발생 여부와 상관없이 무조건 실행할 코드
	}


**catch는 위에서부터 검사하므로 위에서 예외가 잡히면 다른 catch문은 건너뛰고 finally가 실행된다.

자바의 오류
	자바에서는 발생할 수 있는 오류를 클래스로 정의해 두었다.
	만약 실행중 오류가 발생하면 해당 오류 클래스의 객체가 생성된다.
	(메모리에 할당 된다.)
	예외처리를 해두었다면 그 객체의 주소를 catch의 참조변수가  
	예외 클래스에는 다양한 기능을 제공한다.

throw 와 throws
- throws : 예외 던지기
	메소드의 선언부에 사용한다.
	메소드에서 발생할 수 있는 오류를 메소드를 정의할 때 처리하지 않고 해당 메소드를 사용하는 쪽으로 던져서 메소드를 사용하는 개발자가 처리하도록 한다.
	(상황에 맞게 처리하기 위함)
	ex) void method()	throws Exception{}

-throw : 예외를 발생시킨다. -사용자 정의 예외 발생시킬 때 사용
	ex) throw new 예외명();