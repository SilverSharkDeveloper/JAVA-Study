set : 집합
	- 데이터의 순서를 보장하지 않는다.
	- 데이터의 중복을 허용하지 않는다.

구현 클래스
	HashSet
	set 인터페이스를 구현한 가장 대표적인 클래스
	중복되는 값을 저장하면 무시한다.
	인덱스가 존재하지 않아 순서를 보장하지 않으며
	ArrayList나 배열처럼 값을 가져오는게 불가능하다.
	hashCode()가 반환하는 해시코드를 이용하여 데이터를 처리하며 속도가 상대적으로 빠르다.
	이러한 특징 때문에 값의 존재 여부를 파악 할 때 사용하기 좋다

Iterator
	컬렉션에 저장된 데이터들을 컬렉션의 종류와 상관없이 동일한 방식으로 가져오기 위한 인터페이스(타입)
	어떤 자료구조든 Iterator로 변환하면 Iterator만의 방식으로 순서를 만들고 값을 가져올 수 있다.
	값의 유무를 검사하거나 값을 가져올 때는 커서를 이용한다.

	-iterator()
	ArrayList, HashSet 등의 컬렉션 객체를 Iterator타입으로 변환할 때 사용하는 메소드
	
	-hasNext()
	다음 값의 유무를 검사하여 boolean타입으로 반환한다.
	-next()
	다음 값을 가져온다. 아무값도 없다면 예외가 발생한다.(커서를 다음칸으로 옮긴다.)

HashSet 주의 사항
	hashCode를 사용하는 HashSet에 객체를 저장할 때  equals()를 재정의 했다면 반드시 hashCode()도 재정의 해야 한다.

Map
	데이터의 순서를 보장하지 않는다.
	데이터를 key와 value한 쌍으로 저장하여 Key로 데이터에 접근할 수 있다.
	그러므로 Key는 ArrayList의 index와 비슷한 역할을 하며 중복을 허용하지 않는다.(index에 중복이 없는것과 동일)
	
구현 클래스
	-HashMap
	hashCode()가 반환하는 해시코드를 이용하며 검색 속도가 상대적으로 빠르다.
	이미 저장된 key를 가진 한 쌍의 데이터를 넣으면 가장 마지막에 넣은 value로 수정된다.
	저장되지 않은 key를 가진 한 쌍의 데이터를 넣으면 새롭게 추가된다.

JSON(JavaScript Object Nonation)
	데이터를 표현하는 방법이다.(단순 텍스트)
	데이터를 저장, 전송할 때 많이 사용되는 형식(format)이다.
	기존의 XML, csv를 많이 사용했지만 이제는 이해하기도 쉽고 용량도 작은 JSON형식을 많이 사용한다.
	어떤 언어를 사용하더라도 JSON형식으로 데이터를 전송할 수 있다.

JSON의 형식(Map과 유사하다)
{"Key1" : value1, "Key2" : value2, "Key3" : value3, .....}


JSON 배열의 형식
[
{"Key1" : value1, "Key2" : value2, "Key3" : value3, .....},
{"Key1" : value1, "Key2" : value2, "Key3" : value3, .....},
{"Key1" : value1, "Key2" : value2, "Key3" : value3, .....}
]

Map과 JSON의 관계
	JSON은 Map과 비슷한 형태로 Key와 value 한 쌍으로 이루어져있어

***equals를 재정의 하면 무조건 hashCode()도 재정의한다!!!****
