배열(array):저장공간의 나열
	1.변수를 여러 개 선언하면 이름도 여러 개 생긴다.
	->각 저장공간을 관리하기 불편하다.
	n칸 배열을 선언하면 저장공간이 여러 개 생기고, 이름은 한 개 생긴다. ->관리하기 편하다.

	2.규칙성이 없는 값에 규칙성을 부여하기 위해서

변수 : []		하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간
	
배열 : [] 		하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간의 나열
			(하나의 타입으로 된 여러 값을 저장할 수 있다.)

배열의 선언
	자료형[]배열명 = {값1,값2,값3....	};
	//어떤 값을 넣을지 알 때 사용
	int[] ar = {1,2,3,4,5};
	
	자료형[]배열명 = new 자료형[칸수];
	//어떤 값을 넣을지는 모르나, 몇 칸 만들지는 알 때 사용
	int[] ar = new int[5];   	
	각 저장공간엔 자동으로 자료형의 default값이 들어간다.
	
	자료형 [] 배열명 = null;
	//어떤 값을 넣을지도 모르고, 몇 칸 만들지도 모를 때 사용
	int[] ar = null;
	ar = new int[5];


	**new**  : heap 메모리에 할당, 저장공간의 시작주소를 가져온다.
	*null*	: 주소의 기본값(어떤 주소가 들어갈지 모를 때 사용)
	
index
	배열을 생성할 때 각각의 저장공간에 자동으로 붙여지는 번호
	0부터 순차적으로 증가하면서 부여된다.
	배열의 이름이 한 개이기 때문에 이름만으로는 배열의 여러 저장공간에 접근할 수 없다.
	그렇기 때문에 index를 이용하여 각각의 저장공간에 접근한다
	배열명[index]로 사용하고 배열명 [index]는 하나의 저장공간이므로 변수처럼 사용한다.


length
	배열을 생성할 때 자동으로 생성되는 저장공간의 수
	(배열의 길이)
	배열의 길이는 한 번 만들어지면 변동될 수 없으므로 length는 상수라고 볼 수 있다.
	배열명.length로 사용한다.	

2차원 배열 	
		배열안에 배열

		배열에 또 다른 배열들의 참조값을 저장한다.
		
2차원 배열 선언
	자료형[][]	배열명 = new 자료형[행][열];
	행 : 1번배열의 길이
	열 : 2번배열의 길이

	자료형[][] 배열명 = {{값1,값2,값3,}{값1,값2,값3}}

2차원 배열의 길이 
	arr.length : 행의 길이
	arr[n].length : 열의 길이

