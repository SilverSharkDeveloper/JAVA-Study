추상 클래스와 인터페이스 간의 관계
	인터페이스를 클래스에 바로 지정하면 모든 메소드에 강제성이 부여되어 전부 구현해야한다.
	일반적인 상황에서는 모든것이 아닌 필요한 메소드를 골라서 재정의한다.
	인터페이스를 직접 지정하지 않고 다른 클래스에 지정한 후 바디를 만들어 놓으면
	강제성이 소멸되고 이 클래스를 상속받아 필드를 구현하면 골라서 재정의할 수 있게 된다.
	이 때 중간에서 강제성을 없애주는 클래스를 추상 클래스로 선언하며
	추상 클래스 이름뒤에 반드시 Adapter를 붙여 목적을 알려준다.

오버라이딩하는 메소드는 구현을 무조건 해야한다 -> 오버라이딩하는 메소드는 추상메소드로 만들 수 없다.

마커 인터페이스(marker interface)
	클래스들을 그룹화하기 위한 목적으로 사용
	인터페이스는 지정한 클래스의 부모이며, 모든 자식은 부모으 타입이므로 마커 인터페이스를 지저압ㄷ은 클래스들이 하나의 타입으로 그룹화된다.
	이름뒤에 Marker을 붙여 목적을 알려준다.


{;} -> 일부러 비워두웠다는 의미


===================================================================
내부 클래스(Inner class) ->어떤 영역 안에 클래스가 선언되면 내부 클래스라고 한다.
	하나의 클래스에서 a작업과 b작업이 있을 때에는 따로 분리하여 클래스로 만들지 않고, 클래스 안에 클래스를 선언해 설계한다
	이 때 밖에 있는 클래스를 외부 클래스라고 하며, 안에 선언된 클래스를 내부 클래스라고 한다
	외부 클래스가 메모리에 할당되어야 내부 클래스를 객체화할 수 있기 때문에 클래스를 숨기기 위해서 내부 클래스를 사용하기도 하며
	이를 캡슐화 또는 은닉화라고 한다. 내부클래스는 외부 클래스의 필드이기 때문에 외부캘르스이 필드를 자신의 필드처럼 가져다 사용할 수 있지만
	상속관계가 아니기 떄문에 내부 클래스일지라도 extends를 통해 다른 클래스를 상속받아서 사용할 수 있다.
	
익명 클래스(Anonymous Inner Class)
	1.이름이 없는 클래스 구현 되지 않은 필드를 구현하기 위해서 일회성으로 생성되는 클래스이다.	



	interface() ->익명클래스의 생성자 -> 구현한 익명클래스를 메모리에 할당한후 주소값 반환

	->익명 클래스는 이름이 없기 때문에 반드시 업캐스팅해 사용 -> 새로운 필드를 지정해봤자 사용 불가

	register -> 반환타입을 자식타입으로 새로운 타입 만들어 담음 -> 리지스터 된 자식타입을 다시 원래타입에 업캐스팅해서 담기
	->이미 검증이 끝난 객체를 가지고 있으므로 새로운 sell구현 가능 -> 
