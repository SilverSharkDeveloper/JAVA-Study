API(Application Programming Interface) ->어플리케이션 프로그래밍 하기 위한 틀 (이미 만들어진 라이브러리)
	 	개발에 필요한 라이브러리들의 집합 (선배 개발자들이 만들어 놓은 소스코드)

	-내부 API
		JDK 설치 시 제공해주는 기본 API
			docs.oracle.com/javase ->jdk에 있는 모든 API에 대한 공식 문서
	-외부 API
		선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
		보통 JAR파일로 배포하며 자바 프로젝트의 build path에 추가하여 사용할 수 있다.




	/**
	@author 작가
	@since jdk 몇버전부터 사용 할 수 있는지
	<br> 줄바꿈	
	@param 매개변수
	@return 리턴값
	@throws 발생가능한 예외
	@see 참고할 클래스 {@클래스이름} ->보통 상속관계에서 부모

	build path -> build 시점에서 같이 빌드해주는 길 ->	
	
	Classpath -> 먼저 넣어보고 modulepath에 넌다
	order and export -> 나중에 배포할때 받아온 jar파일도 같이 배포할것인가에 대한 여부


==========================================================================================================
Object클래스
	1.toString()
		항상 객체명을 출력할 때에는 toString()을 붙여서 출력해준다.
		따라서 객체명만 출력메소드에 전달하더라도 toString()의 문자열 값이 출력된다.
	2.equals()
		주소값을 비교하는 메소드이며 == 과 동일하다.
		String 클래스에서 equals()를 값 비교로 재정의하여 사용하기 때문에 문자열 비교는 무조건 equals()로 비교한다.
		만약 주소 비교가 아닌 원하는 필드의 비교가 필요하다면 반드시 equals()를 재정의해서 사용해야 한다.
	3.hashcode()


ctrl T ->상속계층도
== : 주소값비교
String -> "값" -> 값(c.p)에 집중 -> ==을 쓰면 .intern()이 자동으로 붙음 -> constant pool에 값이 담겨있는 배열에 주소값을 가져옴
String -> new String("값") -> 객체(필드)에 집중 -> ==을 써도 .intern()이 자동으로 붙지 않음
